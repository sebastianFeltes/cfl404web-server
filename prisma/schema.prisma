// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de configuraci√≥n
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  users User[]

  @@map("roles")
}

model Status {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  users         User[]
  students      Student[]
  courses       Course[]
  courseStudents CourseStudent[]
  staff         Staff[]

  @@map("statuses")
}

model Day {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  courseDays CourseDay[]

  @@map("days")
}

model Shift {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  courseDays CourseDay[]

  @@map("shifts")
}

model Classroom {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(64)
  capacity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  courseDays CourseDay[]

  @@map("classrooms")
}

model AttendanceCode {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  attendances Attendance[]

  @@map("attendance_codes")
}

// Modelos principales
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(32)
  firstName String   @db.VarChar(64) @map("first_name")
  lastName  String   @db.VarChar(64) @map("last_name")
  googleId  String?  @db.VarChar(64) @map("google_id")
  photoUrl  String?  @db.VarChar(255) @map("photo_url")
  email     String   @unique @db.VarChar(64)
  password  String   @db.VarChar(255)
  roleId    Int      @map("role_id")
  statusId  Int      @map("status_id")
  description String? @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  role      Role     @relation(fields: [roleId], references: [id])
  status    Status   @relation(fields: [statusId], references: [id])
  sessions  Session[]
  inscriptions Inscription[]
  students  Student[]
  staff     Staff?
  logs      Log[]

  @@map("users")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  ip           String   @db.VarChar(64)
  sessionToken String   @unique @db.VarChar(255) @map("session_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Inscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  courseId  Int      @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("inscriptions")
}

model Student {
  id            Int      @id @default(autoincrement())
  firstName     String   @db.VarChar(64) @map("first_name")
  lastName      String   @db.VarChar(64) @map("last_name")
  dni           Int      @unique
  userId        Int      @map("user_id")
  statusId      Int      @map("status_id")
  recordNumber  String?   @db.VarChar(64) @map("record_number")
  photoUrl      String?  @db.VarChar(255) @map("photo_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relaciones
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         Status          @relation(fields: [statusId], references: [id])
  studentDetail  StudentDetail?
  courseStudents CourseStudent[]

  @@map("students")
}

model StudentDetail {
  id              Int      @id @default(autoincrement())
  studentId       Int      @unique @map("student_id")
  phone           String?  @db.VarChar(64)
  address         String?  @db.VarChar(128)
  email           String?  @db.VarChar(64)
  dob             DateTime?
  extraPhone      String?  @db.VarChar(64) @map("extra_phone")
  extraEmail      String?  @db.VarChar(64) @map("extra_email")
  dniCopy         Boolean  @default(false) @map("dni_copy")
  schoolFileCopy  Boolean  @default(false) @map("school_file_copy")
  inscriptionForm Boolean  @default(false) @map("inscription_form")
  description     String?  @db.VarChar(255)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relaciones
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_details")
}

model Staff {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  firstName    String   @db.VarChar(64) @map("first_name")
  lastName     String   @db.VarChar(64) @map("last_name")
  dni          Int      @unique
  recordNumber String?   @db.VarChar(64) @map("record_number")
  statusId     Int      @map("status_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relaciones
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        Status        @relation(fields: [statusId], references: [id])
  staffDetail   StaffDetail?
  courses       Course[]

  @@map("staff")
}

model StaffDetail {
  id            Int      @id @default(autoincrement())
  staffId       Int      @unique @map("staff_id")
  phone         String?  @db.VarChar(64)
  address       String?  @db.VarChar(128)
  email         String?  @db.VarChar(64)
  dob           DateTime?
  admissionDate DateTime? @map("admission_date")
  photoUrl      String?  @db.VarChar(255) @map("photo_url")
  description   String?  @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relaciones
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_details")
}

model Course {
  id                  Int      @id @default(autoincrement())
  name                String   @unique @db.VarChar(64)
  staffId             Int      @map("staff_id")
  startDate           DateTime? @map("start_date")
  endDate             DateTime? @map("end_date")
  innasistanceAllowed Int?      @map("innasistance_allowed")
  lectiveYear         Int      @map("lective_year")
  teachingHours       Int?      @map("teaching_hours")
  totalDays           Int?      @map("total_days")
  totalClasses        Int?      @map("total_classes")
  statusId            Int      @map("status_id")
  description         String?  @db.VarChar(255)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relaciones
  staff          Staff           @relation(fields: [staffId], references: [id])
  status         Status          @relation(fields: [statusId], references: [id])
  courseDays     CourseDay[]
  courseStudents CourseStudent[]
  inscriptions   Inscription[]

  @@map("courses")
}

model CourseDay {
  id          Int      @id @default(autoincrement())
  courseId    Int      @map("course_id")
  dayId       Int      @map("day_id")
  classroomId Int      @map("classroom_id")
  shiftId     Int      @map("shift_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  day       Day       @relation(fields: [dayId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])
  shift     Shift     @relation(fields: [shiftId], references: [id])

  @@unique([courseId, dayId])
  @@map("course_days")
}

model CourseStudent {
  id         Int      @id @default(autoincrement())
  courseId   Int      @map("course_id")
  studentId  Int      @map("student_id")
  statusId   Int      @map("status_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relaciones
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  status     Status      @relation(fields: [statusId], references: [id])
  attendances Attendance[]

  @@unique([courseId, studentId])
  @@map("course_students")
}

model Attendance {
  id               Int      @id @default(autoincrement())
  courseStudentId  Int      @map("course_student_id")
  codeId           Int      @map("code_id")
  hour             DateTime
  date             DateTime
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relaciones
  courseStudent CourseStudent @relation(fields: [courseStudentId], references: [id], onDelete: Cascade)
  code          AttendanceCode @relation(fields: [codeId], references: [id])

  @@map("attendances")
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tableName String   @db.VarChar(64) @map("table_name")
  action    String   @db.VarChar(64)
  recordId  Int      @map("record_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("logs")
}

